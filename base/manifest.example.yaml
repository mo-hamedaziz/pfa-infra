# Namespace declaration for tenant isolation
apiVersion: v1
kind: Namespace
metadata:
  name: tenant-abc
  labels:
    tenant: abc
    environment: production
---
# Deployment with tenant-specific configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-nginx
  namespace: tenant-abc
  labels:
    app: hello-nginx
    tenant: abc
    managed-by: gitops
    source-repo: https://github.com/mo-hamedaziz/pfa-infra.git
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hello-nginx
      tenant: abc
  template:
    metadata:
      labels:
        app: hello-nginx
        tenant: abc
      annotations:
        gitops.commit: "{{ .Commit }}"
        gitops.repo: "{{ .Repo }}"
    spec:
      containers:
      - name: nginx
        image: nginxdemos/hello:stable
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
---
# Tenant-specific service
apiVersion: v1
kind: Service
metadata:
  name: hello-nginx-service
  namespace: tenant-abc
  labels:
    tenant: abc
    managed-by: gitops
spec:
  selector:
    app: hello-nginx
    tenant: abc
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
# Tenant-specific ingress with annotations for security
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hello-nginx-ingress
  namespace: tenant-abc
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: hello-nginx.abc.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hello-nginx-service
            port:
              number: 80
  tls:
  - hosts:
    - hello-nginx.abc.example.com
    secretName: hello-nginx-tls
---
# NetworkPolicy for tenant isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: tenant-abc-isolation
  namespace: tenant-abc
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          tenant: abc
    - podSelector: {}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          tenant: abc
    - podSelector: {}
---
# Role and RoleBinding for tenant namespace access
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tenant-abc-developer
  namespace: tenant-abc
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tenant-abc-developer-binding
  namespace: tenant-abc
roleRef:
  kind: Role
  name: tenant-abc-developer
  apiGroup: rbac.authorization.k8s.io
